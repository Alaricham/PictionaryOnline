{"ast":null,"code":"import _classCallCheck from \"/home/alarich/Documents/languagePictionary/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alarich/Documents/languagePictionary/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alarich/Documents/languagePictionary/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alarich/Documents/languagePictionary/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alarich/Documents/languagePictionary/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/alarich/Documents/languagePictionary/frontend/src/components/Canvas.js\";\nimport React, { Component } from 'react';\n\nvar Canvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Canvas, _Component);\n\n  function Canvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Canvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Canvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.canvasRef = React.createRef();\n    _this.state = {\n      paint: false,\n      click: {\n        x: [],\n        y: [],\n        drag: [],\n        color: [],\n        stroke: []\n      }\n    };\n\n    _this.addClick = function (xAxis, yAxis, dragging) {\n      var _this$state$click = _this.state.click,\n          y = _this$state$click.y,\n          x = _this$state$click.x,\n          drag = _this$state$click.drag,\n          color = _this$state$click.color,\n          stroke = _this$state$click.stroke;\n      var _this$props = _this.props,\n          strokeSize = _this$props.strokeSize,\n          sendDrawData = _this$props.sendDrawData;\n      var colorProp = _this.props.color;\n      var clickX = [xAxis];\n      var clickY = [yAxis];\n      var clickDrag = [dragging];\n      var clickColor = [colorProp];\n      var clickStroke = [strokeSize];\n\n      _this.setState({\n        click: {\n          x: x.concat(clickX),\n          y: y.concat(clickY),\n          drag: drag.concat(clickDrag),\n          color: color.concat(clickColor),\n          stroke: stroke.concat(clickStroke)\n        }\n      }, function () {\n        return sendDrawData(_this.state.click);\n      });\n    };\n\n    _this.mousedown = function (event) {\n      if (_this.props.atCanvas) {\n        var boundRect = _this.canvasRef.current.getBoundingClientRect();\n\n        var mouseX = event.pageX - boundRect.left;\n        var mouseY = event.pageY - boundRect.top;\n\n        _this.setState({\n          paint: true\n        });\n\n        _this.addClick(mouseX, mouseY);\n\n        _this.redraw();\n      }\n    };\n\n    _this.mousemove = function (event) {\n      var _this$props2 = _this.props,\n          color = _this$props2.color,\n          strokeSize = _this$props2.strokeSize,\n          atCanvas = _this$props2.atCanvas;\n\n      if (_this.state.paint && atCanvas) {\n        var boundRect = _this.canvasRef.current.getBoundingClientRect();\n\n        _this.addClick(event.pageX - boundRect.left, event.pageY - boundRect.top, true, color, strokeSize);\n\n        _this.redraw();\n      }\n    };\n\n    _this.mouseleave = function (event) {\n      _this.setState({\n        paint: false\n      });\n    };\n\n    _this.clearUpdate = function () {\n      var _this$props3 = _this.props,\n          clearLift = _this$props3.clearLift,\n          clear = _this$props3.clear;\n\n      if (clear) {\n        _this.setState({\n          click: {\n            x: [],\n            y: [],\n            drag: [],\n            color: [],\n            stroke: []\n          }\n        }, clearLift());\n      }\n    };\n\n    _this.updateDrawingData = function () {\n      var _this$props$drawData = _this.props.drawData,\n          x = _this$props$drawData.x,\n          y = _this$props$drawData.y,\n          color = _this$props$drawData.color,\n          stroke = _this$props$drawData.stroke,\n          drag = _this$props$drawData.drag;\n      return {\n        x: x,\n        y: y,\n        color: color,\n        drag: drag,\n        stroke: stroke\n      };\n    };\n\n    _this.redraw = function () {\n      var canvas = _this.canvasRef;\n      var context = canvas.current.getContext('2d');\n      context.clearRect(0, 0, 300, 300); // Clears the canvas\n\n      context.lineJoin = \"round\";\n      var _this$state$click2 = _this.state.click,\n          x = _this$state$click2.x,\n          y = _this$state$click2.y,\n          color = _this$state$click2.color,\n          stroke = _this$state$click2.stroke,\n          drag = _this$state$click2.drag;\n      var len = x.length;\n\n      for (var i = 0; i < len; i++) {\n        context.beginPath();\n\n        if (drag[i] && i) {\n          context.moveTo(x[i - 1], y[i - 1]);\n        } else {\n          context.moveTo(x[i] - 1, y[i]);\n        }\n\n        context.lineTo(x[i], y[i]);\n        context.closePath();\n        context.strokeStyle = color[i];\n        context.lineWidth = stroke[i];\n        context.stroke();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Canvas, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.drawData !== this.props.drawData) {\n        this.setState({\n          click: this.updateDrawingData()\n        });\n      }\n\n      this.redraw();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.clearUpdate();\n      return React.createElement(\"canvas\", {\n        ref: this.canvasRef,\n        height: 300,\n        width: 300,\n        onMouseDown: this.mousedown,\n        onMouseMove: this.mousemove,\n        onMouseUp: this.mouseleave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Canvas;\n}(Component);\n\nexport default Canvas;","map":{"version":3,"sources":["/home/alarich/Documents/languagePictionary/frontend/src/components/Canvas.js"],"names":["React","Component","Canvas","canvasRef","createRef","state","paint","click","x","y","drag","color","stroke","addClick","xAxis","yAxis","dragging","props","strokeSize","sendDrawData","colorProp","clickX","clickY","clickDrag","clickColor","clickStroke","setState","concat","mousedown","event","atCanvas","boundRect","current","getBoundingClientRect","mouseX","pageX","left","mouseY","pageY","top","redraw","mousemove","mouseleave","clearUpdate","clearLift","clear","updateDrawingData","drawData","canvas","context","getContext","clearRect","lineJoin","len","length","i","beginPath","moveTo","lineTo","closePath","strokeStyle","lineWidth","prevProps"],"mappings":"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","sourcesContent":["import React, {\n    Component\n} from 'react';\n\nclass Canvas extends Component {\n\n    canvasRef = React.createRef();\n    state = {\n        paint: false,\n        click: {\n            x: [],\n            y: [],\n            drag: [],\n            color: [],\n            stroke: []\n        },\n    }\n\n    addClick = (xAxis, yAxis, dragging) => {\n        let {\n            y,\n            x,\n            drag,\n            color,\n            stroke\n        } = this.state.click;\n        let {\n            strokeSize,\n            sendDrawData\n        } = this.props;\n        let colorProp = this.props.color;\n        let clickX = [xAxis];\n        let clickY = [yAxis];\n        let clickDrag = [dragging];\n        let clickColor = [colorProp];\n        let clickStroke = [strokeSize];\n\n        this.setState({\n            click: {\n                x: x.concat(clickX),\n                y: y.concat(clickY),\n                drag: drag.concat(clickDrag),\n                color: color.concat(clickColor),\n                stroke: stroke.concat(clickStroke)\n            }\n        }, () => sendDrawData(this.state.click))\n    }\n\n    mousedown = (event) => {\n        if (this.props.atCanvas) {\n            let boundRect = this.canvasRef.current.getBoundingClientRect();\n            let mouseX = event.pageX - boundRect.left;\n            let mouseY = event.pageY - boundRect.top;\n            this.setState({\n                paint: true\n            });\n            this.addClick(mouseX, mouseY);\n            this.redraw();\n        }\n    }\n\n    mousemove = (event) => {\n        let {\n            color,\n            strokeSize,\n            atCanvas\n        } = this.props;\n        if (this.state.paint && atCanvas) {\n            let boundRect = this.canvasRef.current.getBoundingClientRect();\n            this.addClick(\n                event.pageX - boundRect.left,\n                event.pageY - boundRect.top,\n                true,\n                color,\n                strokeSize);\n            this.redraw();\n        }\n    };\n\n    mouseleave = (event) => {\n        this.setState({\n            paint: false\n        });\n    };\n\n    clearUpdate = () => {\n        let {\n            clearLift,\n            clear\n        } = this.props;\n        if (clear) {\n            this.setState({\n                click: {\n                    x: [],\n                    y: [],\n                    drag: [],\n                    color: [],\n                    stroke: []\n                }\n            }, clearLift())\n        }\n    }\n\n    updateDrawingData = () => {\n        const {\n            x,\n            y,\n            color,\n            stroke,\n            drag\n        } = this.props.drawData;\n        return {\n            x,\n            y,\n            color,\n            drag,\n            stroke\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.drawData !== this.props.drawData) {\n            this.setState({\n                click: this.updateDrawingData()\n            })\n\n        }\n\n        this.redraw()\n\n    }\n\n    redraw = () => {\n        const canvas = this.canvasRef;\n        const context = canvas.current.getContext('2d')\n        context.clearRect(0, 0, 300, 300); // Clears the canvas\n        context.lineJoin = \"round\";\n        let {\n            x,\n            y,\n            color,\n            stroke,\n            drag\n        } = this.state.click;\n        let len = x.length;\n        for (let i = 0; i < len; i++) {\n            context.beginPath();\n            if (drag[i] && i) {\n                context.moveTo(x[i - 1], y[i - 1]);\n            } else {\n                context.moveTo(x[i] - 1, y[i]);\n            }\n            context.lineTo(x[i], y[i]);\n            context.closePath();\n            context.strokeStyle = color[i];\n            context.lineWidth = stroke[i]\n            context.stroke();\n        }\n    }\n\n\n    render() {\n        this.clearUpdate()\n        return (\n            <canvas\n                ref={this.canvasRef}\n                height={300}\n                width={300}\n                onMouseDown={this.mousedown}\n                onMouseMove={this.mousemove}\n                onMouseUp={this.mouseleave}\n            />\n        )\n    }\n}\n\n\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}