{"ast":null,"code":"import _classCallCheck from \"/home/alarich/Documents/languagePictionary/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alarich/Documents/languagePictionary/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alarich/Documents/languagePictionary/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alarich/Documents/languagePictionary/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alarich/Documents/languagePictionary/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/alarich/Documents/languagePictionary/frontend/src/components/ChannelBox.js\";\nimport React, { Component } from \"react\";\n\nvar ChannelBox =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChannelBox, _Component);\n\n  function ChannelBox() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChannelBox);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChannelBox)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      language: null,\n      channel: null,\n      users: [],\n      channels: []\n    };\n\n    _this.toggle = function (event, value) {\n      if (!value && event.target.tagName === 'LI') {\n        event.target.classList.toggle('clicked');\n      } else if (event.target.className === 'clicked' && value) {\n        return;\n      } else {\n        var parent = event.target.parentNode;\n        parent.querySelectorAll('li').forEach(function (li) {\n          if (li.className === 'clicked') {\n            li.classList.toggle('clicked');\n          }\n        });\n\n        if (event.target.tagName === 'LI') {\n          event.target.classList.toggle('clicked');\n        }\n      }\n    };\n\n    _this.selectLanguage = function (event) {\n      _this.setState({\n        language: event.target.textContent\n      });\n\n      _this.props.socket.emit('channelList', event.target.textContent);\n    };\n\n    _this.languageBoxes = function () {\n      var languages = ['english', 'french', 'spanish', 'japanese'],\n          mappedLanguages = languages.map(function (language, index) {\n        return React.createElement(\"li\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, language);\n      });\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, mappedLanguages);\n    };\n\n    _this.channelBoxes = function () {\n      if (_this.state.channels) {\n        var mappedChannels = _this.state.channels.map(function (channel, index) {\n          return React.createElement(\"li\", {\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, channel);\n        });\n\n        return React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, mappedChannels);\n      }\n    };\n\n    _this.selectChannel = function (event) {\n      _this.setState({\n        channel: event.target.textContent\n      });\n\n      _this.props.socket.emit('userList', {\n        channel: event.target.textContent,\n        language: _this.state.language\n      });\n    };\n\n    _this.addUser = function () {\n      var _this$state = _this.state,\n          channel = _this$state.channel,\n          language = _this$state.language,\n          name = _this.props.user.name;\n\n      _this.props.socket.emit('addUser', {\n        name: name,\n        channel: channel,\n        language: language\n      });\n\n      _this.props.inChannel(channel);\n    };\n\n    _this.renderUserList = function () {\n      var value = null;\n\n      if (_this.props.users.length && _this.state.channel) {\n        value = _this.props.displayUsers(_this.props.users);\n      } else if (_this.state.channel) {\n        value = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, \"Empty\");\n      }\n\n      return value;\n    };\n\n    return _this;\n  }\n\n  _createClass(ChannelBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.props.socket.on('channelList', function (data) {\n        _this2.setState({\n          channels: data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"special\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col  \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: function onClick(event) {\n          _this3.selectLanguage(event);\n\n          _this3.toggle(event, _this3.state.language);\n        },\n        id: \"Languages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, this.languageBoxes())), React.createElement(\"div\", {\n        className: \"col \",\n        onClick: function onClick(event) {\n          _this3.selectChannel(event);\n\n          _this3.toggle(event, _this3.state.channel);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"Channels\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.channelBoxes())), React.createElement(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"Users\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, this.renderUserList()), React.createElement(\"button\", {\n        id: \"join\",\n        className: \"btn btn-primary\",\n        onClick: this.addUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Join\"))));\n    }\n  }]);\n\n  return ChannelBox;\n}(Component);\n\nexport default ChannelBox;","map":{"version":3,"sources":["/home/alarich/Documents/languagePictionary/frontend/src/components/ChannelBox.js"],"names":["React","Component","ChannelBox","state","language","channel","users","channels","toggle","event","value","target","tagName","classList","className","parent","parentNode","querySelectorAll","forEach","li","selectLanguage","setState","textContent","props","socket","emit","languageBoxes","languages","mappedLanguages","map","index","channelBoxes","mappedChannels","selectChannel","addUser","name","user","inChannel","renderUserList","length","displayUsers","on","data"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,U;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,IADJ;AACUC,MAAAA,OAAO,EAAE,IADnB;AACyBC,MAAAA,KAAK,EAAE,EADhC;AACoCC,MAAAA,QAAQ,EAAE;AAD9C,K;;UAYRC,M,GAAS,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACzB,UAAI,CAACA,KAAD,IAAUD,KAAK,CAACE,MAAN,CAAaC,OAAb,KAAyB,IAAvC,EAA6C;AAC3CH,QAAAA,KAAK,CAACE,MAAN,CAAaE,SAAb,CAAuBL,MAAvB,CAA8B,SAA9B;AACD,OAFD,MAEO,IAAIC,KAAK,CAACE,MAAN,CAAaG,SAAb,KAA2B,SAA3B,IAAwCJ,KAA5C,EAAmD;AACxD;AACD,OAFM,MAEA;AACL,YAAIK,MAAM,GAAGN,KAAK,CAACE,MAAN,CAAaK,UAA1B;AACAD,QAAAA,MAAM,CAACE,gBAAP,CAAwB,IAAxB,EAA8BC,OAA9B,CAAsC,UAAAC,EAAE,EAAI;AAC1C,cAAIA,EAAE,CAACL,SAAH,KAAiB,SAArB,EAAgC;AAC9BK,YAAAA,EAAE,CAACN,SAAH,CAAaL,MAAb,CAAoB,SAApB;AACD;AACF,SAJD;;AAKA,YAAIC,KAAK,CAACE,MAAN,CAAaC,OAAb,KAAyB,IAA7B,EAAmC;AACjCH,UAAAA,KAAK,CAACE,MAAN,CAAaE,SAAb,CAAuBL,MAAvB,CAA8B,SAA9B;AACD;AACF;AACF,K;;UAGDY,c,GAAiB,UAACX,KAAD,EAAW;AAC1B,YAAKY,QAAL,CAAc;AAAEjB,QAAAA,QAAQ,EAAEK,KAAK,CAACE,MAAN,CAAaW;AAAzB,OAAd;;AACA,YAAKC,KAAL,CAAWC,MAAX,CAAkBC,IAAlB,CAAuB,aAAvB,EAAsChB,KAAK,CAACE,MAAN,CAAaW,WAAnD;AAED,K;;UAEDI,a,GAAgB,YAAM;AACpB,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,QAAZ,EAAsB,SAAtB,EAAiC,UAAjC,CAAhB;AAAA,UACEC,eAAe,GAAGD,SAAS,CAACE,GAAV,CAAc,UAACzB,QAAD,EAAW0B,KAAX,EAAqB;AACnD,eAAQ;AAAI,UAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiB1B,QAAjB,CAAR;AACD,OAFiB,CADpB;AAIA,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKwB,eAAL,CAAR;AACD,K;;UAEDG,Y,GAAe,YAAM;AACnB,UAAI,MAAK5B,KAAL,CAAWI,QAAf,EAAyB;AACvB,YAAIyB,cAAc,GAAG,MAAK7B,KAAL,CAAWI,QAAX,CAAoBsB,GAApB,CAAwB,UAACxB,OAAD,EAAUyB,KAAV,EAAoB;AAC/D,iBAAQ;AAAI,YAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAiBzB,OAAjB,CAAR;AACD,SAFoB,CAArB;;AAGA,eAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK2B,cAAL,CAAR;AACD;AACF,K;;UAEDC,a,GAAgB,UAACxB,KAAD,EAAW;AACzB,YAAKY,QAAL,CAAc;AAAEhB,QAAAA,OAAO,EAAEI,KAAK,CAACE,MAAN,CAAaW;AAAxB,OAAd;;AACA,YAAKC,KAAL,CAAWC,MAAX,CAAkBC,IAAlB,CAAuB,UAAvB,EAAmC;AAAEpB,QAAAA,OAAO,EAAEI,KAAK,CAACE,MAAN,CAAaW,WAAxB;AAAqClB,QAAAA,QAAQ,EAAE,MAAKD,KAAL,CAAWC;AAA1D,OAAnC;AAED,K;;UAED8B,O,GAAU,YAAM;AAAA,wBACc,MAAK/B,KADnB;AAAA,UACRE,OADQ,eACRA,OADQ;AAAA,UACCD,QADD,eACCA,QADD;AAAA,UAEV+B,IAFU,GAED,MAAKZ,KAAL,CAAWa,IAFV,CAEVD,IAFU;;AAGd,YAAKZ,KAAL,CAAWC,MAAX,CAAkBC,IAAlB,CAAuB,SAAvB,EAAkC;AAChCU,QAAAA,IAAI,EAAEA,IAD0B;AAEhC9B,QAAAA,OAAO,EAAEA,OAFuB;AAGhCD,QAAAA,QAAQ,EAAEA;AAHsB,OAAlC;;AAKA,YAAKmB,KAAL,CAAWc,SAAX,CAAqBhC,OAArB;AACD,K;;UAEDiC,c,GAAiB,YAAM;AACrB,UAAI5B,KAAK,GAAG,IAAZ;;AACA,UAAI,MAAKa,KAAL,CAAWjB,KAAX,CAAiBiC,MAAjB,IAA2B,MAAKpC,KAAL,CAAWE,OAA1C,EAAmD;AACjDK,QAAAA,KAAK,GAAG,MAAKa,KAAL,CAAWiB,YAAX,CAAwB,MAAKjB,KAAL,CAAWjB,KAAnC,CAAR;AACD,OAFD,MAEO,IAAI,MAAKH,KAAL,CAAWE,OAAf,EAAwB;AAC7BK,QAAAA,KAAK,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAR;AACD;;AACD,aAAQA,KAAR;AACD,K;;;;;;;wCA1EmB;AAAA;;AAClB,WAAKa,KAAL,CAAWC,MAAX,CAAkBiB,EAAlB,CAAqB,aAArB,EAAoC,UAAAC,IAAI,EAAI;AAC1C,QAAA,MAAI,CAACrB,QAAL,CAAc;AAAEd,UAAAA,QAAQ,EAAEmC;AAAZ,SAAd;AACD,OAFD;AAID;;;6BAwEQ;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,OAAO,EAAE,iBAACjC,KAAD,EAAW;AAAE,UAAA,MAAI,CAACW,cAAL,CAAoBX,KAApB;;AAA4B,UAAA,MAAI,CAACD,MAAL,CAAYC,KAAZ,EAAmB,MAAI,CAACN,KAAL,CAAWC,QAA9B;AAAyC,SAAhG;AAAkG,QAAA,EAAE,EAAC,WAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKsB,aAAL,EADH,CADF,CADF,EAME;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,QAAA,OAAO,EAAE,iBAACjB,KAAD,EAAW;AAAE,UAAA,MAAI,CAACwB,aAAL,CAAmBxB,KAAnB;;AAA2B,UAAA,MAAI,CAACD,MAAL,CAAYC,KAAZ,EAAmB,MAAI,CAACN,KAAL,CAAWE,OAA9B;AAAwC,SAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAK0B,YAAL,EADH,CADF,CANF,EAWE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKO,cAAL,EADH,CADF,EAIE;AAAQ,QAAA,EAAE,EAAC,MAAX;AAAkB,QAAA,SAAS,EAAC,iBAA5B;AAA8C,QAAA,OAAO,EAAE,KAAKJ,OAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,CAXF,CADF,CADF;AAuBD;;;;EA5GsBjC,S;;AA+GzB,eAAeC,UAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass ChannelBox extends Component {\n\n  state = {\n    language: null, channel: null, users: [], channels: []\n  }\n\n\n  componentDidMount() {\n    this.props.socket.on('channelList', data => {\n      this.setState({ channels: data })\n    })\n\n  }\n\n  toggle = (event, value) => {\n    if (!value && event.target.tagName === 'LI') {\n      event.target.classList.toggle('clicked')\n    } else if (event.target.className === 'clicked' && value) {\n      return\n    } else {\n      let parent = event.target.parentNode;\n      parent.querySelectorAll('li').forEach(li => {\n        if (li.className === 'clicked') {\n          li.classList.toggle('clicked')\n        }\n      });\n      if (event.target.tagName === 'LI') {\n        event.target.classList.toggle('clicked')\n      }\n    }\n  }\n\n\n  selectLanguage = (event) => {\n    this.setState({ language: event.target.textContent });\n    this.props.socket.emit('channelList', event.target.textContent);\n\n  }\n\n  languageBoxes = () => {\n    let languages = ['english', 'french', 'spanish', 'japanese'],\n      mappedLanguages = languages.map((language, index) => {\n        return (<li key={index}>{language}</li>)\n      })\n    return (<ul>{mappedLanguages}</ul>)\n  }\n\n  channelBoxes = () => {\n    if (this.state.channels) {\n      let mappedChannels = this.state.channels.map((channel, index) => {\n        return (<li key={index}>{channel}</li>)\n      })\n      return (<ul>{mappedChannels}</ul>)\n    }\n  }\n\n  selectChannel = (event) => {\n    this.setState({ channel: event.target.textContent });\n    this.props.socket.emit('userList', { channel: event.target.textContent, language: this.state.language });\n\n  }\n\n  addUser = () => {\n    let { channel, language } = this.state,\n      { name } = this.props.user;\n    this.props.socket.emit('addUser', {\n      name: name,\n      channel: channel,\n      language: language\n    });\n    this.props.inChannel(channel)\n  }\n\n  renderUserList = () => {\n    let value = null;\n    if (this.props.users.length && this.state.channel) {\n      value = this.props.displayUsers(this.props.users)\n    } else if (this.state.channel) {\n      value = <p>Empty</p>;\n    }\n    return (value)\n  }\n\n\n  render() {\n    return (\n      <div className=\"special\">\n        <div className=\"row\">\n          <div className=\"col  \">\n            <div onClick={(event) => { this.selectLanguage(event); this.toggle(event, this.state.language) }} id=\"Languages\">\n              {this.languageBoxes()}\n            </div>\n          </div>\n          <div className=\"col \" onClick={(event) => { this.selectChannel(event); this.toggle(event, this.state.channel) }}>\n            <div id=\"Channels\">\n              {this.channelBoxes()}\n            </div>\n          </div>\n          <div className=\"col\">\n            <div id=\"Users\">\n              {this.renderUserList()}\n            </div>\n            <button id=\"join\" className='btn btn-primary' onClick={this.addUser}>Join</button>\n          </div>\n        </div >\n      </div >\n    )\n\n  }\n}\n\nexport default ChannelBox;\n"]},"metadata":{},"sourceType":"module"}