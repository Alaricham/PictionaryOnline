{"version":3,"sources":["components/ChannelBox.js","components/Canvas.js","components/Timer.js","components/User.js","components/InputBox.js","components/ChatBox.js","components/App.js","serviceWorker.js","index.js"],"names":["ChannelBox","state","language","channel","users","channels","toggle","event","value","target","tagName","className","parentNode","querySelectorAll","forEach","li","classList","selectLanguage","_this","setState","textContent","props","socket","emit","languageBoxes","mappedLanguages","map","index","react_default","a","createElement","key","channelBoxes","mappedChannels","selectChannel","addUser","_this$state","name","user","inChannel","renderUserList","length","displayUsers","_this2","this","on","data","_this3","onClick","id","Component","Canvas","canvasRef","React","createRef","paint","click","x","y","drag","color","stroke","addClick","xAxis","yAxis","dragging","_this$state$click","_this$props","strokeSize","sendDrawData","clickX","clickY","clickDrag","clickColor","clickStroke","concat","mousedown","atCanvas","boundRect","current","getBoundingClientRect","mouseX","pageX","left","mouseY","pageY","top","redraw","mousemove","_this$props2","mouseleave","clearUpdate","_this$props3","clearLift","clear","updateDrawingData","_this$props$drawData","drawData","context","getContext","clearRect","lineJoin","_this$state$click2","len","i","beginPath","moveTo","lineTo","closePath","strokeStyle","lineWidth","prevProps","ref","height","width","onMouseDown","onMouseMove","onMouseUp","Timer","timerSetup","total","minutes","parseInt","seconds","Fragment","Number","timer","User","onKeyPress","inputName","type","InputBox","inputBox","liftMsg","text","submitMessage","submitText","updateInput","disabled","lock","placeholder","onChange","ChatBox","list","log","message","chatRef","io","connect","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","disconnect","console","displayWinner","winnerDisplay","val","awaitingPlayers","awaiting","clearWin","interval","clearInterval","togglePallette","pallette","toggleSlider","sliderTog","emitClear","setColor","hex","renderChannel","components_Canvas","onMouseLeave","es","vertical","min","max","lib","onChangeComplete","components_Timer","round","word","components_InputBox","points","components_ChatBox","renderUserInput","components_User","renderChannelBox","components_ChannelBox","mappedUsers","winAnim","setInterval","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a26c854d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ChannelBox extends Component {\n\n  state = {\n    language: null, channel: null, users: [], channels: []\n  }\n\n\n  componentDidMount() {\n    this.props.socket.on('channelList', data => {\n      this.setState({ channels: data })\n    })\n\n  }\n\n  toggle = (event, value) => {\n    if (!value && event.target.tagName === 'LI') {\n      event.target.classList.toggle('clicked')\n    } else if (event.target.className === 'clicked' && value) {\n      return\n    } else {\n      let parent = event.target.parentNode;\n      parent.querySelectorAll('li').forEach(li => {\n        if (li.className === 'clicked') {\n          li.classList.toggle('clicked')\n        }\n      });\n      if (event.target.tagName === 'LI') {\n        event.target.classList.toggle('clicked')\n      }\n    }\n  }\n\n\n  selectLanguage = (event) => {\n    this.setState({ language: event.target.textContent });\n    this.props.socket.emit('channelList', event.target.textContent);\n\n  }\n\n  languageBoxes = () => {\n    let languages = ['english', 'french', 'spanish', 'japanese'],\n      mappedLanguages = languages.map((language, index) => {\n        return (<li key={index}>{language}</li>)\n      })\n    return (<ul>{mappedLanguages}</ul>)\n  }\n\n  channelBoxes = () => {\n    if (this.state.channels) {\n      let mappedChannels = this.state.channels.map((channel, index) => {\n        return (<li key={index}>{channel}</li>)\n      })\n      return (<ul>{mappedChannels}</ul>)\n    }\n  }\n\n  selectChannel = (event) => {\n    this.setState({ channel: event.target.textContent });\n    this.props.socket.emit('userList', { channel: event.target.textContent, language: this.state.language });\n\n  }\n\n  addUser = () => {\n    let { channel, language } = this.state,\n      { name } = this.props.user;\n    this.props.socket.emit('addUser', {\n      name: name,\n      channel: channel,\n      language: language\n    });\n    this.props.inChannel(channel)\n  }\n\n  renderUserList = () => {\n    let value = null;\n    if (this.props.users.length && this.state.channel) {\n      value = this.props.displayUsers(this.props.users)\n    } else if (this.state.channel) {\n      value = <p>Empty</p>;\n    }\n    return (value)\n  }\n\n\n  render() {\n    return (\n      <div className=\"special\">\n        <div className=\"row\">\n          <div className=\"col  \">\n            <div onClick={(event) => { this.selectLanguage(event); this.toggle(event, this.state.language) }} id=\"Languages\">\n              {this.languageBoxes()}\n            </div>\n          </div>\n          <div className=\"col \" onClick={(event) => { this.selectChannel(event); this.toggle(event, this.state.channel) }}>\n            <div id=\"Channels\">\n              {this.channelBoxes()}\n            </div>\n          </div>\n          <div className=\"col\">\n            <div id=\"Users\">\n              {this.renderUserList()}\n            </div>\n            <button id=\"join\" className='btn btn-primary' onClick={this.addUser}>Join</button>\n          </div>\n        </div >\n      </div >\n    )\n\n  }\n}\n\nexport default ChannelBox;\n","import React, {\n    Component\n} from 'react';\n\nclass Canvas extends Component {\n\n    canvasRef = React.createRef();\n    state = {\n        paint: false,\n        click: {\n            x: [],\n            y: [],\n            drag: [],\n            color: [],\n            stroke: []\n        },\n    }\n\n    addClick = (xAxis, yAxis, dragging) => {\n        let {\n            y,\n            x,\n            drag,\n            color,\n            stroke\n        } = this.state.click;\n        let {\n            strokeSize,\n            sendDrawData\n        } = this.props;\n        let colorProp = this.props.color;\n        let clickX = [xAxis];\n        let clickY = [yAxis];\n        let clickDrag = [dragging];\n        let clickColor = [colorProp];\n        let clickStroke = [strokeSize];\n\n        this.setState({\n            click: {\n                x: x.concat(clickX),\n                y: y.concat(clickY),\n                drag: drag.concat(clickDrag),\n                color: color.concat(clickColor),\n                stroke: stroke.concat(clickStroke)\n            }\n        }, () => sendDrawData(this.state.click))\n    }\n\n    mousedown = (event) => {\n        if (this.props.atCanvas) {\n            let boundRect = this.canvasRef.current.getBoundingClientRect();\n            let mouseX = event.pageX - boundRect.left;\n            let mouseY = event.pageY - boundRect.top;\n            this.setState({\n                paint: true\n            });\n            this.addClick(mouseX, mouseY);\n            this.redraw();\n        }\n    }\n\n    mousemove = (event) => {\n        let {\n            color,\n            strokeSize,\n            atCanvas\n        } = this.props;\n        if (this.state.paint && atCanvas) {\n            let boundRect = this.canvasRef.current.getBoundingClientRect();\n            this.addClick(\n                event.pageX - boundRect.left,\n                event.pageY - boundRect.top,\n                true,\n                color,\n                strokeSize);\n            this.redraw();\n        }\n    };\n\n    mouseleave = (event) => {\n        this.setState({\n            paint: false\n        });\n    };\n\n    clearUpdate = () => {\n        let {\n            clearLift,\n            clear\n        } = this.props;\n        if (clear) {\n            this.setState({\n                click: {\n                    x: [],\n                    y: [],\n                    drag: [],\n                    color: [],\n                    stroke: []\n                }\n            }, clearLift())\n        }\n    }\n\n    updateDrawingData = () => {\n        const {\n            x,\n            y,\n            color,\n            stroke,\n            drag\n        } = this.props.drawData;\n        return {\n            x,\n            y,\n            color,\n            drag,\n            stroke\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.drawData !== this.props.drawData) {\n            this.setState({\n                click: this.updateDrawingData()\n            })\n\n        }\n\n        this.redraw()\n\n    }\n\n    redraw = () => {\n        const canvas = this.canvasRef;\n        const context = canvas.current.getContext('2d')\n        context.clearRect(0, 0, 300, 300); // Clears the canvas\n        context.lineJoin = \"round\";\n        let {\n            x,\n            y,\n            color,\n            stroke,\n            drag\n        } = this.state.click;\n        let len = x.length;\n        for (let i = 0; i < len; i++) {\n            context.beginPath();\n            if (drag[i] && i) {\n                context.moveTo(x[i - 1], y[i - 1]);\n            } else {\n                context.moveTo(x[i] - 1, y[i]);\n            }\n            context.lineTo(x[i], y[i]);\n            context.closePath();\n            context.strokeStyle = color[i];\n            context.lineWidth = stroke[i]\n            context.stroke();\n        }\n    }\n\n\n    render() {\n        this.clearUpdate()\n        return (\n            <canvas\n                ref={this.canvasRef}\n                height={300}\n                width={300}\n                onMouseDown={this.mousedown}\n                onMouseMove={this.mousemove}\n                onMouseUp={this.mouseleave}\n            />\n        )\n    }\n}\n\n\nexport default Canvas;","import React, { Component } from 'react';\n\nclass Timer extends Component {\n\n    timerSetup = (total) => {\n        let minutes = parseInt(total / 60000),\n            seconds = minutes > 0 ? parseInt((total / 1000) / minutes) : parseInt(total / 1000);\n        if (seconds > 59) {\n            seconds -= 60;\n        }\n        if (seconds < 10) {\n            seconds = '0' + seconds;\n        }\n\n        return minutes + \":\" + seconds\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <h1>{this.timerSetup(Number(this.props.timer))}</h1>\n            </React.Fragment>\n        )\n    }\n\n}\n\nexport default Timer;","\nimport React from 'react';\n\nconst User = (props) => {\n    return (<div>\n        {props.user.name ? <h1>Logged as {props.user.name}</h1> :\n            <div className=\"container\">\n                <h1>Select User Name</h1>\n                <input onKeyPress={props.inputName} type=\"text\" />\n            </div>\n        }\n    </div>\n    )\n\n}\n\nexport default User;","import React, { Component } from 'react';\n\nclass InputBox extends Component {\n    state = { inputBox: '' }\n\n    liftMsg = (text) => {\n        this.props.submitMessage(text);\n    }\n\n    submitText = (event) => {\n        if (event.key === \"Enter\" && event.target.value !== '') {\n            this.setState({ inputBox: '' })\n            this.liftMsg(event.target.value);\n        }\n    }\n\n    updateInput = (event) => {\n        this.setState({ inputBox: event.target.value })\n    }\n\n    render() {\n        return (\n            <div id=\"inputBox\">\n                <input disabled={this.props.lock} placeholder={this.props.lock ? 'Chatting disabled until next turn' : 'Type your guess or chat'} onChange={this.updateInput} onKeyPress={this.submitText} value={this.state.inputBox}></input>\n            </div>\n        )\n    }\n}\n\nexport default InputBox;","import React, { Component } from 'react';\n\nclass ChatBox extends Component {\n\n    render() {\n        const list = this.props.log.map((message, i) => { return (<p key={i}><span key={i} className=\"userTags\">{message.user}: </span>{message.text}</p>) })\n        return (\n            <div ref={this.chatRef} id=\"chatBox\" >\n                {list}\n\n            </div>\n        )\n    }\n}\n\nexport default ChatBox;","import React, { Component } from 'react';\nimport ChannelBox from './ChannelBox'\nimport Canvas from \"./Canvas\";\nimport Timer from './Timer';\nimport User from './User';\nimport InputBox from './InputBox';\nimport ChatBox from './ChatBox';\nimport { ChromePicker } from 'react-color';\nimport Slider from 'rc-slider';\nimport io from 'socket.io-client';\nimport '../stylesheets/root.css';\nimport '../stylesheets/App.css';\nimport '../stylesheets/UserInput.css';\nimport '../stylesheets/Menu.css'\nimport 'rc-slider/assets/index.css'\n\nconst socket = io.connect(\"http://localhost:3000/\");\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            awaiting: true,\n            message: '',\n            log: [],\n            drawData: {},\n            user: {},\n            channel: null,\n            word: false,\n            timer: 120000,\n            round: 1,\n            atCanvas: false,\n            points: 0,\n            clear: false,\n            winnerDisplay: { name: 'none', val: false },\n            users: [],\n            color: 'black',\n            strokeSize: 1,\n            lock: false,\n            interval: null,\n            pallette: { val: false },\n            sliderTog: { val: false }\n        }\n    }\n\n    disconnect = () => {\n        this.setState({ channel: null, users: [] });\n        console.log('her')\n        socket.disconnect()\n    }\n\n    displayWinner = () => {\n        if (this.state.winnerDisplay.val) {\n            return (<div id='winner'>\n                <h1>Winner {this.state.winnerDisplay.name}!</h1>\n            </div>)\n        }\n    }\n\n    awaitingPlayers = () => {\n        if (this.state.awaiting) {\n            return (<div id='awaitingPlayers'>\n                <h1>Awaiting Players...</h1>\n            </div>)\n        }\n    }\n\n    submitMessage = (text) => {\n        this.setState({ message: text });\n        socket.emit('message', text);\n    }\n\n    componentDidMount() {\n        socket.on('new message', (data) => {\n            this.setState({ log: this.state.log.concat(data) })\n        })\n\n        socket.on('new drawing', (data) => {\n            this.setState({ drawData: data.drawData })\n        })\n        socket.on('wordGuess', (data) => {\n            this.setState({ word: data, lock: true })\n        })\n\n        socket.on('timer', (data) => {\n            this.setState({ timer: data })\n        })\n\n        socket.on('noCanvas', () => {\n            this.setState({ atCanvas: false })\n        })\n\n        socket.on('userAtCanvas', () => {\n            this.setState({ atCanvas: true, lock: true })\n        })\n\n        socket.on('round', (data) => {\n            this.setState({ round: data, lock: false })\n        })\n\n        socket.on('guess', (data) => {\n            this.setState({ points: data, lock: true })\n        })\n\n        socket.on('correctGuess', (data) => {\n            this.setState({ log: this.state.log.concat(data) })\n        })\n\n        socket.on('restart', () => {\n            this.setState({ points: 0, log: [], clear: true, awaiting: false })\n        })\n\n        socket.on('winner', data => {\n            let winAnim = setInterval(this.clearWin, 6000);\n            this.setState({ interval: winAnim, winnerDisplay: { name: data, val: true } })\n        })\n\n        socket.on('userList', data => {\n            this.setState({ users: data })\n        })\n        socket.on('clear', () => {\n            this.setState({ clear: true })\n        })\n\n        socket.on('awaiting', () => {\n            this.setState({ awaiting: true })\n        })\n\n    }\n\n    clearWin = () => {\n        this.setState({ winnerDisplay: { name: 'none', val: false } });\n        console.log(this.state.interval)\n        clearInterval(this.state.interval)\n    }\n\n\n    clearLift = () => {\n        this.setState({ clear: false });\n    }\n\n    togglePallette = (event) => {\n        if (!this.state.pallette.val) {\n            this.setState({ pallette: { val: true } })\n        } else {\n            this.setState({ pallette: { val: false } })\n        }\n    }\n\n    toggleSlider = (event) => {\n        if (!this.state.sliderTog.val && this.state.atCanvas) {\n            this.setState({ sliderTog: { val: true } })\n        } else {\n            this.setState({ sliderTog: { val: false } })\n        }\n    }\n\n    emitClear = () => {\n        socket.emit('clear');\n    }\n\n    sendDrawData = (data) => {\n        socket.emit('drawing', data);\n    }\n\n    inputName = (event) => {\n        if (event.key === 'Enter') {\n            this.setState({ user: { name: event.target.value } })\n        }\n    }\n\n    setColor = (color, event) => {\n        if (this.state.atCanvas) {\n            this.setState({ color: color.hex })\n        }\n    }\n\n    strokeSize = (value) => {\n        this.setState({ strokeSize: value });\n    }\n\n    renderChannel = () => {\n        const { user, channel } = this.state;\n        if (user && channel) {\n            return (\n                <div id=\"layout\">\n                    <div className=\"row\">\n                        <div className=\"col box1\">\n                            <div className='row'>\n                                <div className=\"col set\">\n                                    <Canvas clearLift={this.clearLift} strokeSize={this.state.strokeSize} clear={this.state.clear} atCanvas={this.state.atCanvas} sendDrawData={this.sendDrawData} drawData={this.state.drawData} color={this.state.color} />\n                                    <div id=\"sideMenu\">\n                                        {this.state.sliderTog.val && <div id='slider' onMouseLeave={() => this.setState({ sliderTog: { val: false } })}>\n                                            <Slider vertical={true} onChange={this.strokeSize} min={1} max={100} value={this.state.strokeSize} />\n                                        </div>}\n                                        <div id=\"color\" onClick={this.togglePallette}>\n                                            <i className=\"fas fa-palette\"></i>\n                                            <div id='chromePicker' onMouseLeave={() => this.setState({ pallette: { val: false } })} >\n                                                {this.state.pallette.val && <ChromePicker\n                                                    onChangeComplete={this.setColor}\n                                                    color={this.state.color}\n                                                />}\n                                            </div>\n                                        </div>\n                                        <div id=\"stroke\" onClick={this.toggleSlider}>\n                                            <i className=\"fas fa-sort-numeric-up\"></i>\n                                            <i className=\"fas fa-paint-brush\"></i>\n                                        </div>\n                                        <div id=\"clear\" onClick={this.emitClear} disabled={!this.state.lock}>\n                                            <i className=\"fas fa-trash-alt\"></i>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"col\">\n                                    <div id=\"timerBox\">\n                                        <Timer timer={this.state.timer} />\n                                        <h2>Round {this.state.round}</h2>\n                                    </div>\n                                    {this.state.atCanvas &&\n                                        <div id=\"wordInfo\">\n                                            <h1>{this.state.word}</h1>\n                                        </div>\n                                    }\n                                </div>\n                            </div>\n                            <InputBox submitMessage={this.submitMessage} lock={this.state.lock} />\n                        </div>\n                        {this.displayWinner()}\n                        {this.awaitingPlayers()};\n                        <div className=\"col box2\">\n                            <div id='userInfo'>\n                                <h2>{this.state.user.name}</h2>\n                                <h3>Score: {this.state.points}</h3>\n                                <button className=\"btn\" onClick={this.disconnect}>Disconnect</button>\n                            </div>\n                            <div id=\"userList\">\n                                {this.displayUsers(this.state.users)}\n                            </div>\n                            <ChatBox log={this.state.log} />\n                        </div>\n\n                    </div>\n                </div>\n\n            )\n        }\n    }\n\n    renderUserInput = () => {\n        if (!this.state.user.name) {\n            return <User inputName={this.inputName} user={this.state.user} />\n        }\n    }\n\n    renderChannelBox = () => {\n        if (!this.state.channel && this.state.user.name) {\n            socket.connect()\n            return <ChannelBox socket={socket} user={this.state.user} inChannel={this.inChannel} users={this.state.users} displayUsers={this.displayUsers} />\n        }\n    }\n\n    inChannel = (channel) => {\n        this.setState({ channel: channel })\n    }\n\n    displayUsers = (users) => {\n        if (users) {\n            let mappedUsers = users.map((user, index) => {\n                return (<li key={index}>{user}</li>)\n            })\n            return (<ul>{mappedUsers}</ul>)\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                {this.renderUserInput()}\n                {this.renderChannelBox()}\n                {this.renderChannel()}\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}